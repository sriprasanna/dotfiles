#!/bin/sh
# Usage: . rbdev
# Activate a Ruby working directory for all
#
# IMPORTANT
# This file is meant to be sourced into your shell. Once sourced,
# the rbdev command is used to manipulate the PATH and RUBYLIB
# environment variables.

test "$(basename $0)" = rbdev && {
    echo 1>&2 "This program cannot be run directly; it must first be sourced"
    echo 1>&2 "into a shell. Try: . $(basename $0)"
    echo 1>&2
    echo 1>&2 "Consider adding the following line to your ~/.bashrc:"
    echo 1>&2 "  . $(basename $0) 2>/dev/null || true"
    exit 1
}

# Usage: rbdev
# Put standard-structure ruby project at <dir> on RUBYLIB, PATH,
# MANPATH, etc. With no <dir>, assume the current working directory.
rbdev() {
    _dir="${1:-.}"
    _exp=$(cd "$_dir" && pwd)
    _mods=false

    # put bin at head of PATH
    test -d "$_exp"/bin && {
        PATH="$_exp/bin:$PATH"
        printf 1>&2 "%10s %s\n" "PATH+" "$_dir/bin"
        _mods=true
    }

    # put extension library build dirs at head of RUBYLIB
    for _sub in $(
        find "$_exp"/ext -type d 2>/dev/null || true
        test -d "$_exp"/lib && echo "$_exp"/lib
      )
    do
        export RUBYLIB="$_sub:$RUBYLIB"
        printf 1>&2 "%10s %s\n" "RUBYLIB+" "$(echo "$_sub" | sed "s@$_exp/@$_dir/@")"
        _mods=true
    done

    unset _exp _sub

    # check if we did anything useful
    if   $_mods
    then unset _mods _dir
         true
    else echo 1>&2 "no lib, ext, or bin dirs detected at $_dir"
         unset _mods _dir
         false
    fi
}
